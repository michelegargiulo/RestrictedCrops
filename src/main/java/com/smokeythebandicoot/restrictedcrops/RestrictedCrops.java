package com.smokeythebandicoot.restrictedcrops;

import com.smokeythebandicoot.restrictedcrops.config.ModConfig;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.client.event.ConfigChangedEvent;
import net.minecraftforge.fml.common.Loader;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.IEventListener;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.apache.logging.log4j.Logger;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentHashMap;

@Mod(
        modid = RestrictedCrops.MODID,
        version = RestrictedCrops.MODVERSION,
        name = RestrictedCrops.MODNAME,
        useMetadata = true
        //dependencies = "after:openterraingenerator",
        //guiFactory = "com.smokeythebandicoot." + RestrictedCrops.MODID + ".config.ConfigGuiFactory"
)
public class RestrictedCrops {

    public static final String MODID = "restrictedcrops";
    public static final String MODNAME = "Restricted Crops";
    public static final String MODVERSION = "1.2";
    public static final String MODDESCRIPTION = "A Mod that limits where ICropGrow and ISaplingGrow events occur, based on biome and dimension. Also affects bonemealing.";
    public static final String MODAUTHOR = "SmokeyTheBandicoot";
    public static final String MODCREDITS = "Lothrazar, for the original idea";
    public static final String MODURL = "";
    public static final String MODLOGO = "assets/restrictedcrops/textures/logo.png";

    public static Logger logger;
    @Instance(value = MODID)
    public static RestrictedCrops instance;

    @EventHandler
    public void onPreInit(FMLPreInitializationEvent event) {
        logger = event.getModLog();

        // Set mod info
        event.getModMetadata().autogenerated = false; // stops it from complaining about missing mcmod.info
        event.getModMetadata().name = MODID;
        event.getModMetadata().credits = MODCREDITS;
        event.getModMetadata().authorList.clear();
        event.getModMetadata().authorList.add(MODAUTHOR);
        event.getModMetadata().description = MODDESCRIPTION;
        event.getModMetadata().url = MODURL;
        event.getModMetadata().logoFile = MODLOGO;

        // ModConfig.initConfigFile(event);

        GrowthHandler grower = new GrowthHandler();
        MinecraftForge.TERRAIN_GEN_BUS.register(grower);
        MinecraftForge.EVENT_BUS.register(grower);
        MinecraftForge.EVENT_BUS.register(this);
    }

    @EventHandler
    public void onInit(FMLInitializationEvent event) {
        if (ModConfig.preventOTGSaplings && Loader.isModLoaded("openterraingenerator")) {

            logger.info("Detected OpenTerrainGenerator mod. Trying to unregister its sapling listener...");

            try {
                String OTGForgePluginClassName = "com.pg85.otg.forge.events.SaplingListener";

                Field eventBusListenerField = MinecraftForge.EVENT_BUS.getClass().getDeclaredField("listeners");
                eventBusListenerField.setAccessible(true);
                ConcurrentHashMap<Object, ArrayList<IEventListener>> ForgeEventBusListeners = (ConcurrentHashMap<Object, ArrayList<IEventListener>>) eventBusListenerField.get(MinecraftForge.EVENT_BUS);

                Field terrainGenBusListenerField = MinecraftForge.EVENT_BUS.getClass().getDeclaredField("listeners");
                terrainGenBusListenerField.setAccessible(true);
                ConcurrentHashMap<Object, ArrayList<IEventListener>> ForgeTerrainGenBusListeners = (ConcurrentHashMap<Object, ArrayList<IEventListener>>) terrainGenBusListenerField.get(MinecraftForge.TERRAIN_GEN_BUS);

                logger.info("Scanning Forge EVENT_BUS looking for OTG SaplingListener...");
                for (Object listener : ForgeEventBusListeners.keySet()) {
                    if (listener.getClass().getName().equals(OTGForgePluginClassName)) {
                        logger.info("OTG Sapling Listener found! Unregistering it...");
                        MinecraftForge.EVENT_BUS.unregister(listener);
                        break;
                    }
                }

                logger.info("Scanning Forge TERRAIN_GEN_BUS looking for OTG SaplingListener...");
                for (Object listener : ForgeTerrainGenBusListeners.keySet()) {
                    if (listener.getClass().getName().equals(OTGForgePluginClassName)) {
                        logger.info("OTG Sapling Listener found! Unregistering it...");
                        MinecraftForge.TERRAIN_GEN_BUS.unregister(listener);
                        break;
                    }
                }

            } catch (Exception ex) {
                logger.error("It was not possible to Find and/or Unregister OTG sapling listener from Forge Event Bus. Some vanilla " +
                        "saplings might grow outside of predefined rules!");
                logger.error(ex.toString());
            }
        }
    }
}
